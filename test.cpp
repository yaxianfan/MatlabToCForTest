#include<iostream>
#include<vector>
using namespace std;

//快速傅里叶变换fft
void fft(double* real, double* imag, double* outReal, double* outImage, int size) {
    const double PI = acos(-1.0);
    /*
        real：向量实部
        imag：向量虚部
        这里仅实现对向量的快速傅里叶变换：Y = fft(X)
        计算公式可见matlab关于fft的介绍

        Y(k) = n∑(j=1) X(j)*Wn^(j-1)(k-1)
        X(j) = n∑(k=1)Y(k)*Wn^(j-1)(k-1)
        其中 Wn = e^((-2πi)/n) = cos(-2π/n)+sin(-2π/n)i
    */
    /*double* outReal;
    outReal = (double*)malloc(sizeof(double) * size);
    double* outImage;
    outImage = (double*)malloc(sizeof(double) * size);*/
    
    for (size_t i = 0; i < size; i++)
    {
        outReal[i] = 0;
        outImage[i] = 0;
    }
    double fixed_factor = (-2 * PI) / size;
    for (int u = 0; u < size; u++) {
        double uxf = u * fixed_factor;
        for (int x = 0; x < size; x++) {
            //X(j)*Wn^(j-1)(k-1)
            double power = uxf * x;
            double temp = imag[x] * sin(power);
            outReal[u] += real[x] * cos(power) - temp;
            outImage[u] += real[x] * sin(power) + temp;
        }
    }

    
}

int main()
{
    int size = 256;
    double a[256] = { 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000,  33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 33142.9296875000, 34164, 33459, 30748, 30181, 33926, 40407, 44504,39899, 28207, 16162, 13712, 24822, 41891,56983, 56901, 41014, 20750, 6813, 10172, 28109, 46454, 55443, 51166, 36801, 22996, 17350,21201, 29140, 37654, 41808, 41833 };
    double b[256] = {0};
    double* real = a;
    double* image = b;
    double* outReal = nullptr;
    outReal = (double*)malloc(sizeof(double) * size);
    double* outImage = nullptr;
    outImage = (double*)malloc(sizeof(double) * size);

    cout << "real------------------" << endl;
    for (size_t i = 225; i < size; i++)
    {
        cout << real[i] << " ";
    }
    cout << endl;

    cout << "image------------------" << endl;
    for (size_t i = 0; i < size; i++)
    {
        cout << image[i] << " ";
    }
    cout << endl;

    fft(real, image, outReal, outImage, size);

    cout << "outReal------------" << endl;
    for (size_t i = 0; i < size; i++)
    {
        cout << outReal[i] << " ";
    }
    cout << endl;

    cout << "outImage------------" << endl;for (size_t i = 0; i < size; i++)
    {
        cout << outImage[i] << " ";
    }
    cout << endl;
    cout << "done" << endl;

} 